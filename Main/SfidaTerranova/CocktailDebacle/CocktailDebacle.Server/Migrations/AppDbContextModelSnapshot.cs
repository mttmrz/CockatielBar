// <auto-generated />
using System;
using CocktailDebacle.Server.Service;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CocktailDebacle.Server.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CocktailDebacle.Server.Models.Cocktail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DateModified")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdDrink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<bool?>("PublicCocktail")
                        .HasColumnType("bit");

                    b.Property<string>("StrAlcoholic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrCategory")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrCreativeCommonsConfirmed")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrDrink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrDrinkAlternate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrDrinkThumb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrGlass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIBA")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrImageAttribution")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrImageSource")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrIngredient9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructions")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsDE")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsES")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsFR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsIT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsZH_HANS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrInstructionsZH_HANT")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure10")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure11")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure12")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure13")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure14")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure15")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure5")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure6")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure7")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure8")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrMeasure9")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StrVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserIdCocktail")
                        .HasColumnType("int");

                    b.Property<DateTime?>("dateCreated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Cocktails", (string)null);
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.UserHistorySearch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("SearchDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SearchText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("DbUserHistorySearch");
                });

            modelBuilder.Entity("CocktailUser", b =>
                {
                    b.Property<int>("CocktailsLikeId")
                        .HasColumnType("int");

                    b.Property<int>("UserLikesId")
                        .HasColumnType("int");

                    b.HasKey("CocktailsLikeId", "UserLikesId");

                    b.HasIndex("UserLikesId");

                    b.ToTable("UserCocktailsLike", (string)null);
                });

            modelBuilder.Entity("User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool?>("AcceptCookies")
                        .HasColumnType("bit");

                    b.Property<string>("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bio_link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("CustomSearch")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgProfileUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsOfMajorityAge")
                        .HasColumnType("bit");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProfileParallaxImg")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("DbUser");
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.Property<int>("FollowerId")
                        .HasColumnType("int");

                    b.Property<int>("FollowedId")
                        .HasColumnType("int");

                    b.HasKey("FollowerId", "FollowedId");

                    b.HasIndex("FollowedId");

                    b.ToTable("UserUser");
                });

            modelBuilder.Entity("CocktailDebacle.Server.Models.UserHistorySearch", b =>
                {
                    b.HasOne("User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("CocktailUser", b =>
                {
                    b.HasOne("CocktailDebacle.Server.Models.Cocktail", null)
                        .WithMany()
                        .HasForeignKey("CocktailsLikeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("UserLikesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UserUser", b =>
                {
                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("FollowedId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("User", null)
                        .WithMany()
                        .HasForeignKey("FollowerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
